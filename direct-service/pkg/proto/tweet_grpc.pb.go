// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/proto/tweet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TweetService_CreateTweet_FullMethodName     = "/TweetService/CreateTweet"
	TweetService_GetTweets_FullMethodName       = "/TweetService/GetTweets"
	TweetService_GetTweetsByUser_FullMethodName = "/TweetService/GetTweetsByUser"
	TweetService_UpdateTweet_FullMethodName     = "/TweetService/UpdateTweet"
	TweetService_DeleteTweet_FullMethodName     = "/TweetService/DeleteTweet"
	TweetService_AddLike_FullMethodName         = "/TweetService/AddLike"
	TweetService_RemoveLike_FullMethodName      = "/TweetService/RemoveLike"
	TweetService_AddComment_FullMethodName      = "/TweetService/AddComment"
	TweetService_RemoveComment_FullMethodName   = "/TweetService/RemoveComment"
	TweetService_AddShare_FullMethodName        = "/TweetService/AddShare"
	TweetService_SaveTweet_FullMethodName       = "/TweetService/SaveTweet"
	TweetService_RemoveSave_FullMethodName      = "/TweetService/RemoveSave"
	TweetService_GetTweetByID_FullMethodName    = "/TweetService/GetTweetByID"
	TweetService_GetSavedTweets_FullMethodName  = "/TweetService/GetSavedTweets"
	TweetService_GetLikedTweets_FullMethodName  = "/TweetService/GetLikedTweets"
)

// TweetServiceClient is the client API for TweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TweetServiceClient interface {
	CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error)
	GetTweets(ctx context.Context, in *GetTweetsRequest, opts ...grpc.CallOption) (*GetTweetsResponse, error)
	GetTweetsByUser(ctx context.Context, in *GetTweetsByUserRequest, opts ...grpc.CallOption) (*GetTweetsByUserResponse, error)
	UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*UpdateTweetResponse, error)
	DeleteTweet(ctx context.Context, in *DeleteTweetRequest, opts ...grpc.CallOption) (*DeleteTweetResponse, error)
	AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error)
	RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	RemoveComment(ctx context.Context, in *RemoveCommentRequest, opts ...grpc.CallOption) (*RemoveCommentResponse, error)
	AddShare(ctx context.Context, in *AddShareRequest, opts ...grpc.CallOption) (*AddShareResponse, error)
	SaveTweet(ctx context.Context, in *SaveTweetRequest, opts ...grpc.CallOption) (*SaveTweetResponse, error)
	RemoveSave(ctx context.Context, in *RemoveSaveRequest, opts ...grpc.CallOption) (*RemoveSaveResponse, error)
	GetTweetByID(ctx context.Context, in *GetTweetByIDRequest, opts ...grpc.CallOption) (*GetTweetByIDResponse, error)
	GetSavedTweets(ctx context.Context, in *GetSavedTweetsRequest, opts ...grpc.CallOption) (*GetSavedTweetsResponse, error)
	GetLikedTweets(ctx context.Context, in *GetLikedTweetsRequest, opts ...grpc.CallOption) (*GetLikedTweetsResponse, error)
}

type tweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetServiceClient(cc grpc.ClientConnInterface) TweetServiceClient {
	return &tweetServiceClient{cc}
}

func (c *tweetServiceClient) CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTweetResponse)
	err := c.cc.Invoke(ctx, TweetService_CreateTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetTweets(ctx context.Context, in *GetTweetsRequest, opts ...grpc.CallOption) (*GetTweetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetsResponse)
	err := c.cc.Invoke(ctx, TweetService_GetTweets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetTweetsByUser(ctx context.Context, in *GetTweetsByUserRequest, opts ...grpc.CallOption) (*GetTweetsByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetsByUserResponse)
	err := c.cc.Invoke(ctx, TweetService_GetTweetsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*UpdateTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTweetResponse)
	err := c.cc.Invoke(ctx, TweetService_UpdateTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) DeleteTweet(ctx context.Context, in *DeleteTweetRequest, opts ...grpc.CallOption) (*DeleteTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTweetResponse)
	err := c.cc.Invoke(ctx, TweetService_DeleteTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) AddLike(ctx context.Context, in *AddLikeRequest, opts ...grpc.CallOption) (*AddLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLikeResponse)
	err := c.cc.Invoke(ctx, TweetService_AddLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLikeResponse)
	err := c.cc.Invoke(ctx, TweetService_RemoveLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, TweetService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) RemoveComment(ctx context.Context, in *RemoveCommentRequest, opts ...grpc.CallOption) (*RemoveCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCommentResponse)
	err := c.cc.Invoke(ctx, TweetService_RemoveComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) AddShare(ctx context.Context, in *AddShareRequest, opts ...grpc.CallOption) (*AddShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddShareResponse)
	err := c.cc.Invoke(ctx, TweetService_AddShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) SaveTweet(ctx context.Context, in *SaveTweetRequest, opts ...grpc.CallOption) (*SaveTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTweetResponse)
	err := c.cc.Invoke(ctx, TweetService_SaveTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) RemoveSave(ctx context.Context, in *RemoveSaveRequest, opts ...grpc.CallOption) (*RemoveSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSaveResponse)
	err := c.cc.Invoke(ctx, TweetService_RemoveSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetTweetByID(ctx context.Context, in *GetTweetByIDRequest, opts ...grpc.CallOption) (*GetTweetByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTweetByIDResponse)
	err := c.cc.Invoke(ctx, TweetService_GetTweetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetSavedTweets(ctx context.Context, in *GetSavedTweetsRequest, opts ...grpc.CallOption) (*GetSavedTweetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSavedTweetsResponse)
	err := c.cc.Invoke(ctx, TweetService_GetSavedTweets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetLikedTweets(ctx context.Context, in *GetLikedTweetsRequest, opts ...grpc.CallOption) (*GetLikedTweetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikedTweetsResponse)
	err := c.cc.Invoke(ctx, TweetService_GetLikedTweets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetServiceServer is the server API for TweetService service.
// All implementations must embed UnimplementedTweetServiceServer
// for forward compatibility.
type TweetServiceServer interface {
	CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error)
	GetTweets(context.Context, *GetTweetsRequest) (*GetTweetsResponse, error)
	GetTweetsByUser(context.Context, *GetTweetsByUserRequest) (*GetTweetsByUserResponse, error)
	UpdateTweet(context.Context, *UpdateTweetRequest) (*UpdateTweetResponse, error)
	DeleteTweet(context.Context, *DeleteTweetRequest) (*DeleteTweetResponse, error)
	AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error)
	RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error)
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	RemoveComment(context.Context, *RemoveCommentRequest) (*RemoveCommentResponse, error)
	AddShare(context.Context, *AddShareRequest) (*AddShareResponse, error)
	SaveTweet(context.Context, *SaveTweetRequest) (*SaveTweetResponse, error)
	RemoveSave(context.Context, *RemoveSaveRequest) (*RemoveSaveResponse, error)
	GetTweetByID(context.Context, *GetTweetByIDRequest) (*GetTweetByIDResponse, error)
	GetSavedTweets(context.Context, *GetSavedTweetsRequest) (*GetSavedTweetsResponse, error)
	GetLikedTweets(context.Context, *GetLikedTweetsRequest) (*GetLikedTweetsResponse, error)
	mustEmbedUnimplementedTweetServiceServer()
}

// UnimplementedTweetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTweetServiceServer struct{}

func (UnimplementedTweetServiceServer) CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTweet not implemented")
}
func (UnimplementedTweetServiceServer) GetTweets(context.Context, *GetTweetsRequest) (*GetTweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweets not implemented")
}
func (UnimplementedTweetServiceServer) GetTweetsByUser(context.Context, *GetTweetsByUserRequest) (*GetTweetsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetsByUser not implemented")
}
func (UnimplementedTweetServiceServer) UpdateTweet(context.Context, *UpdateTweetRequest) (*UpdateTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTweet not implemented")
}
func (UnimplementedTweetServiceServer) DeleteTweet(context.Context, *DeleteTweetRequest) (*DeleteTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTweet not implemented")
}
func (UnimplementedTweetServiceServer) AddLike(context.Context, *AddLikeRequest) (*AddLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedTweetServiceServer) RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLike not implemented")
}
func (UnimplementedTweetServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedTweetServiceServer) RemoveComment(context.Context, *RemoveCommentRequest) (*RemoveCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveComment not implemented")
}
func (UnimplementedTweetServiceServer) AddShare(context.Context, *AddShareRequest) (*AddShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShare not implemented")
}
func (UnimplementedTweetServiceServer) SaveTweet(context.Context, *SaveTweetRequest) (*SaveTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTweet not implemented")
}
func (UnimplementedTweetServiceServer) RemoveSave(context.Context, *RemoveSaveRequest) (*RemoveSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSave not implemented")
}
func (UnimplementedTweetServiceServer) GetTweetByID(context.Context, *GetTweetByIDRequest) (*GetTweetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetByID not implemented")
}
func (UnimplementedTweetServiceServer) GetSavedTweets(context.Context, *GetSavedTweetsRequest) (*GetSavedTweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedTweets not implemented")
}
func (UnimplementedTweetServiceServer) GetLikedTweets(context.Context, *GetLikedTweetsRequest) (*GetLikedTweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedTweets not implemented")
}
func (UnimplementedTweetServiceServer) mustEmbedUnimplementedTweetServiceServer() {}
func (UnimplementedTweetServiceServer) testEmbeddedByValue()                      {}

// UnsafeTweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetServiceServer will
// result in compilation errors.
type UnsafeTweetServiceServer interface {
	mustEmbedUnimplementedTweetServiceServer()
}

func RegisterTweetServiceServer(s grpc.ServiceRegistrar, srv TweetServiceServer) {
	// If the following call pancis, it indicates UnimplementedTweetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TweetService_ServiceDesc, srv)
}

func _TweetService_CreateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).CreateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_CreateTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).CreateTweet(ctx, req.(*CreateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_GetTweets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetTweets(ctx, req.(*GetTweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetTweetsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetTweetsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_GetTweetsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetTweetsByUser(ctx, req.(*GetTweetsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_UpdateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).UpdateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_UpdateTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).UpdateTweet(ctx, req.(*UpdateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_DeleteTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).DeleteTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_DeleteTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).DeleteTweet(ctx, req.(*DeleteTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_AddLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).AddLike(ctx, req.(*AddLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_RemoveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).RemoveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_RemoveLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).RemoveLike(ctx, req.(*RemoveLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_RemoveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).RemoveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_RemoveComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).RemoveComment(ctx, req.(*RemoveCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_AddShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).AddShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_AddShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).AddShare(ctx, req.(*AddShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_SaveTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).SaveTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_SaveTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).SaveTweet(ctx, req.(*SaveTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_RemoveSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).RemoveSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_RemoveSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).RemoveSave(ctx, req.(*RemoveSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetTweetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetTweetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_GetTweetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetTweetByID(ctx, req.(*GetTweetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetSavedTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedTweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetSavedTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_GetSavedTweets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetSavedTweets(ctx, req.(*GetSavedTweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetLikedTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedTweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetLikedTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetService_GetLikedTweets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetLikedTweets(ctx, req.(*GetLikedTweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TweetService_ServiceDesc is the grpc.ServiceDesc for TweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TweetService",
	HandlerType: (*TweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTweet",
			Handler:    _TweetService_CreateTweet_Handler,
		},
		{
			MethodName: "GetTweets",
			Handler:    _TweetService_GetTweets_Handler,
		},
		{
			MethodName: "GetTweetsByUser",
			Handler:    _TweetService_GetTweetsByUser_Handler,
		},
		{
			MethodName: "UpdateTweet",
			Handler:    _TweetService_UpdateTweet_Handler,
		},
		{
			MethodName: "DeleteTweet",
			Handler:    _TweetService_DeleteTweet_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _TweetService_AddLike_Handler,
		},
		{
			MethodName: "RemoveLike",
			Handler:    _TweetService_RemoveLike_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _TweetService_AddComment_Handler,
		},
		{
			MethodName: "RemoveComment",
			Handler:    _TweetService_RemoveComment_Handler,
		},
		{
			MethodName: "AddShare",
			Handler:    _TweetService_AddShare_Handler,
		},
		{
			MethodName: "SaveTweet",
			Handler:    _TweetService_SaveTweet_Handler,
		},
		{
			MethodName: "RemoveSave",
			Handler:    _TweetService_RemoveSave_Handler,
		},
		{
			MethodName: "GetTweetByID",
			Handler:    _TweetService_GetTweetByID_Handler,
		},
		{
			MethodName: "GetSavedTweets",
			Handler:    _TweetService_GetSavedTweets_Handler,
		},
		{
			MethodName: "GetLikedTweets",
			Handler:    _TweetService_GetLikedTweets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/tweet.proto",
}
