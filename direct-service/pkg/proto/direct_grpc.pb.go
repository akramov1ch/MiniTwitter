// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/proto/direct.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DirectService_CreateDirectMessage_FullMethodName  = "/DirectService/CreateDirectMessage"
	DirectService_GetDirectMessages_FullMethodName    = "/DirectService/GetDirectMessages"
	DirectService_DeleteDirectMessage_FullMethodName  = "/DirectService/DeleteDirectMessage"
	DirectService_GetDirectMessageByID_FullMethodName = "/DirectService/GetDirectMessageByID"
)

// DirectServiceClient is the client API for DirectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectServiceClient interface {
	CreateDirectMessage(ctx context.Context, in *CreateDirectMessageRequest, opts ...grpc.CallOption) (*CreateDirectMessageResponse, error)
	GetDirectMessages(ctx context.Context, in *GetDirectMessagesRequest, opts ...grpc.CallOption) (*GetDirectMessagesResponse, error)
	DeleteDirectMessage(ctx context.Context, in *DeleteDirectMessageRequest, opts ...grpc.CallOption) (*DeleteDirectMessageResponse, error)
	GetDirectMessageByID(ctx context.Context, in *GetDirectMessageByIDRequest, opts ...grpc.CallOption) (*GetDirectMessageByIDResponse, error)
}

type directServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectServiceClient(cc grpc.ClientConnInterface) DirectServiceClient {
	return &directServiceClient{cc}
}

func (c *directServiceClient) CreateDirectMessage(ctx context.Context, in *CreateDirectMessageRequest, opts ...grpc.CallOption) (*CreateDirectMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirectMessageResponse)
	err := c.cc.Invoke(ctx, DirectService_CreateDirectMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directServiceClient) GetDirectMessages(ctx context.Context, in *GetDirectMessagesRequest, opts ...grpc.CallOption) (*GetDirectMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDirectMessagesResponse)
	err := c.cc.Invoke(ctx, DirectService_GetDirectMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directServiceClient) DeleteDirectMessage(ctx context.Context, in *DeleteDirectMessageRequest, opts ...grpc.CallOption) (*DeleteDirectMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDirectMessageResponse)
	err := c.cc.Invoke(ctx, DirectService_DeleteDirectMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directServiceClient) GetDirectMessageByID(ctx context.Context, in *GetDirectMessageByIDRequest, opts ...grpc.CallOption) (*GetDirectMessageByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDirectMessageByIDResponse)
	err := c.cc.Invoke(ctx, DirectService_GetDirectMessageByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectServiceServer is the server API for DirectService service.
// All implementations must embed UnimplementedDirectServiceServer
// for forward compatibility.
type DirectServiceServer interface {
	CreateDirectMessage(context.Context, *CreateDirectMessageRequest) (*CreateDirectMessageResponse, error)
	GetDirectMessages(context.Context, *GetDirectMessagesRequest) (*GetDirectMessagesResponse, error)
	DeleteDirectMessage(context.Context, *DeleteDirectMessageRequest) (*DeleteDirectMessageResponse, error)
	GetDirectMessageByID(context.Context, *GetDirectMessageByIDRequest) (*GetDirectMessageByIDResponse, error)
	mustEmbedUnimplementedDirectServiceServer()
}

// UnimplementedDirectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDirectServiceServer struct{}

func (UnimplementedDirectServiceServer) CreateDirectMessage(context.Context, *CreateDirectMessageRequest) (*CreateDirectMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectMessage not implemented")
}
func (UnimplementedDirectServiceServer) GetDirectMessages(context.Context, *GetDirectMessagesRequest) (*GetDirectMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectMessages not implemented")
}
func (UnimplementedDirectServiceServer) DeleteDirectMessage(context.Context, *DeleteDirectMessageRequest) (*DeleteDirectMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirectMessage not implemented")
}
func (UnimplementedDirectServiceServer) GetDirectMessageByID(context.Context, *GetDirectMessageByIDRequest) (*GetDirectMessageByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectMessageByID not implemented")
}
func (UnimplementedDirectServiceServer) mustEmbedUnimplementedDirectServiceServer() {}
func (UnimplementedDirectServiceServer) testEmbeddedByValue()                       {}

// UnsafeDirectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectServiceServer will
// result in compilation errors.
type UnsafeDirectServiceServer interface {
	mustEmbedUnimplementedDirectServiceServer()
}

func RegisterDirectServiceServer(s grpc.ServiceRegistrar, srv DirectServiceServer) {
	// If the following call pancis, it indicates UnimplementedDirectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DirectService_ServiceDesc, srv)
}

func _DirectService_CreateDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectServiceServer).CreateDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectService_CreateDirectMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectServiceServer).CreateDirectMessage(ctx, req.(*CreateDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectService_GetDirectMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectServiceServer).GetDirectMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectService_GetDirectMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectServiceServer).GetDirectMessages(ctx, req.(*GetDirectMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectService_DeleteDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectServiceServer).DeleteDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectService_DeleteDirectMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectServiceServer).DeleteDirectMessage(ctx, req.(*DeleteDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectService_GetDirectMessageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectMessageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectServiceServer).GetDirectMessageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectService_GetDirectMessageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectServiceServer).GetDirectMessageByID(ctx, req.(*GetDirectMessageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectService_ServiceDesc is the grpc.ServiceDesc for DirectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DirectService",
	HandlerType: (*DirectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDirectMessage",
			Handler:    _DirectService_CreateDirectMessage_Handler,
		},
		{
			MethodName: "GetDirectMessages",
			Handler:    _DirectService_GetDirectMessages_Handler,
		},
		{
			MethodName: "DeleteDirectMessage",
			Handler:    _DirectService_DeleteDirectMessage_Handler,
		},
		{
			MethodName: "GetDirectMessageByID",
			Handler:    _DirectService_GetDirectMessageByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/direct.proto",
}
