// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: protos/like-proto/like.proto

package like_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LikeService_CreateLikeTweet_FullMethodName      = "/LikeService/CreateLikeTweet"
	LikeService_DeleteLikeTweet_FullMethodName      = "/LikeService/DeleteLikeTweet"
	LikeService_GetLikesTweet_FullMethodName        = "/LikeService/GetLikesTweet"
	LikeService_GetLikeTweetByUser_FullMethodName   = "/LikeService/GetLikeTweetByUser"
	LikeService_GetLikedTweet_FullMethodName        = "/LikeService/GetLikedTweet"
	LikeService_CreateLikeComment_FullMethodName    = "/LikeService/CreateLikeComment"
	LikeService_DeleteLikeComment_FullMethodName    = "/LikeService/DeleteLikeComment"
	LikeService_GetLikesComment_FullMethodName      = "/LikeService/GetLikesComment"
	LikeService_GetLikeCommentByUser_FullMethodName = "/LikeService/GetLikeCommentByUser"
)

// LikeServiceClient is the client API for LikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeServiceClient interface {
	CreateLikeTweet(ctx context.Context, in *CreateLikeTweetRequest, opts ...grpc.CallOption) (*CreateLikeTweetResponse, error)
	DeleteLikeTweet(ctx context.Context, in *DeleteLikeTweetRequest, opts ...grpc.CallOption) (*DeleteLikeTweetResponse, error)
	GetLikesTweet(ctx context.Context, in *GetLikesTweetRequest, opts ...grpc.CallOption) (*GetLikesTweetResponse, error)
	GetLikeTweetByUser(ctx context.Context, in *GetLikeTweetByUserRequest, opts ...grpc.CallOption) (*GetLikeTweetByUserResponse, error)
	GetLikedTweet(ctx context.Context, in *GetLikedTweetRequest, opts ...grpc.CallOption) (*GetLikedTweetResponse, error)
	CreateLikeComment(ctx context.Context, in *CreateLikeCommentRequest, opts ...grpc.CallOption) (*CreateLikeCommentResponse, error)
	DeleteLikeComment(ctx context.Context, in *DeleteLikeCommentRequest, opts ...grpc.CallOption) (*DeleteLikeCommentResponse, error)
	GetLikesComment(ctx context.Context, in *GetLikesCommentRequest, opts ...grpc.CallOption) (*GetLikesCommentResponse, error)
	GetLikeCommentByUser(ctx context.Context, in *GetLikeCommentByUserRequest, opts ...grpc.CallOption) (*GetLikeCommentByUserResponse, error)
}

type likeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeServiceClient(cc grpc.ClientConnInterface) LikeServiceClient {
	return &likeServiceClient{cc}
}

func (c *likeServiceClient) CreateLikeTweet(ctx context.Context, in *CreateLikeTweetRequest, opts ...grpc.CallOption) (*CreateLikeTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLikeTweetResponse)
	err := c.cc.Invoke(ctx, LikeService_CreateLikeTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) DeleteLikeTweet(ctx context.Context, in *DeleteLikeTweetRequest, opts ...grpc.CallOption) (*DeleteLikeTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLikeTweetResponse)
	err := c.cc.Invoke(ctx, LikeService_DeleteLikeTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLikesTweet(ctx context.Context, in *GetLikesTweetRequest, opts ...grpc.CallOption) (*GetLikesTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikesTweetResponse)
	err := c.cc.Invoke(ctx, LikeService_GetLikesTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLikeTweetByUser(ctx context.Context, in *GetLikeTweetByUserRequest, opts ...grpc.CallOption) (*GetLikeTweetByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikeTweetByUserResponse)
	err := c.cc.Invoke(ctx, LikeService_GetLikeTweetByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLikedTweet(ctx context.Context, in *GetLikedTweetRequest, opts ...grpc.CallOption) (*GetLikedTweetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikedTweetResponse)
	err := c.cc.Invoke(ctx, LikeService_GetLikedTweet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) CreateLikeComment(ctx context.Context, in *CreateLikeCommentRequest, opts ...grpc.CallOption) (*CreateLikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLikeCommentResponse)
	err := c.cc.Invoke(ctx, LikeService_CreateLikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) DeleteLikeComment(ctx context.Context, in *DeleteLikeCommentRequest, opts ...grpc.CallOption) (*DeleteLikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLikeCommentResponse)
	err := c.cc.Invoke(ctx, LikeService_DeleteLikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLikesComment(ctx context.Context, in *GetLikesCommentRequest, opts ...grpc.CallOption) (*GetLikesCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikesCommentResponse)
	err := c.cc.Invoke(ctx, LikeService_GetLikesComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLikeCommentByUser(ctx context.Context, in *GetLikeCommentByUserRequest, opts ...grpc.CallOption) (*GetLikeCommentByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikeCommentByUserResponse)
	err := c.cc.Invoke(ctx, LikeService_GetLikeCommentByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServiceServer is the server API for LikeService service.
// All implementations must embed UnimplementedLikeServiceServer
// for forward compatibility.
type LikeServiceServer interface {
	CreateLikeTweet(context.Context, *CreateLikeTweetRequest) (*CreateLikeTweetResponse, error)
	DeleteLikeTweet(context.Context, *DeleteLikeTweetRequest) (*DeleteLikeTweetResponse, error)
	GetLikesTweet(context.Context, *GetLikesTweetRequest) (*GetLikesTweetResponse, error)
	GetLikeTweetByUser(context.Context, *GetLikeTweetByUserRequest) (*GetLikeTweetByUserResponse, error)
	GetLikedTweet(context.Context, *GetLikedTweetRequest) (*GetLikedTweetResponse, error)
	CreateLikeComment(context.Context, *CreateLikeCommentRequest) (*CreateLikeCommentResponse, error)
	DeleteLikeComment(context.Context, *DeleteLikeCommentRequest) (*DeleteLikeCommentResponse, error)
	GetLikesComment(context.Context, *GetLikesCommentRequest) (*GetLikesCommentResponse, error)
	GetLikeCommentByUser(context.Context, *GetLikeCommentByUserRequest) (*GetLikeCommentByUserResponse, error)
	mustEmbedUnimplementedLikeServiceServer()
}

// UnimplementedLikeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLikeServiceServer struct{}

func (UnimplementedLikeServiceServer) CreateLikeTweet(context.Context, *CreateLikeTweetRequest) (*CreateLikeTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLikeTweet not implemented")
}
func (UnimplementedLikeServiceServer) DeleteLikeTweet(context.Context, *DeleteLikeTweetRequest) (*DeleteLikeTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikeTweet not implemented")
}
func (UnimplementedLikeServiceServer) GetLikesTweet(context.Context, *GetLikesTweetRequest) (*GetLikesTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikesTweet not implemented")
}
func (UnimplementedLikeServiceServer) GetLikeTweetByUser(context.Context, *GetLikeTweetByUserRequest) (*GetLikeTweetByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeTweetByUser not implemented")
}
func (UnimplementedLikeServiceServer) GetLikedTweet(context.Context, *GetLikedTweetRequest) (*GetLikedTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedTweet not implemented")
}
func (UnimplementedLikeServiceServer) CreateLikeComment(context.Context, *CreateLikeCommentRequest) (*CreateLikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLikeComment not implemented")
}
func (UnimplementedLikeServiceServer) DeleteLikeComment(context.Context, *DeleteLikeCommentRequest) (*DeleteLikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikeComment not implemented")
}
func (UnimplementedLikeServiceServer) GetLikesComment(context.Context, *GetLikesCommentRequest) (*GetLikesCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikesComment not implemented")
}
func (UnimplementedLikeServiceServer) GetLikeCommentByUser(context.Context, *GetLikeCommentByUserRequest) (*GetLikeCommentByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeCommentByUser not implemented")
}
func (UnimplementedLikeServiceServer) mustEmbedUnimplementedLikeServiceServer() {}
func (UnimplementedLikeServiceServer) testEmbeddedByValue()                     {}

// UnsafeLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServiceServer will
// result in compilation errors.
type UnsafeLikeServiceServer interface {
	mustEmbedUnimplementedLikeServiceServer()
}

func RegisterLikeServiceServer(s grpc.ServiceRegistrar, srv LikeServiceServer) {
	// If the following call pancis, it indicates UnimplementedLikeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LikeService_ServiceDesc, srv)
}

func _LikeService_CreateLikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLikeTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).CreateLikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_CreateLikeTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).CreateLikeTweet(ctx, req.(*CreateLikeTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_DeleteLikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikeTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).DeleteLikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_DeleteLikeTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).DeleteLikeTweet(ctx, req.(*DeleteLikeTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLikesTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLikesTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_GetLikesTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLikesTweet(ctx, req.(*GetLikesTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLikeTweetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeTweetByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLikeTweetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_GetLikeTweetByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLikeTweetByUser(ctx, req.(*GetLikeTweetByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLikedTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikedTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLikedTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_GetLikedTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLikedTweet(ctx, req.(*GetLikedTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_CreateLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).CreateLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_CreateLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).CreateLikeComment(ctx, req.(*CreateLikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_DeleteLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).DeleteLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_DeleteLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).DeleteLikeComment(ctx, req.(*DeleteLikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLikesComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLikesComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_GetLikesComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLikesComment(ctx, req.(*GetLikesCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLikeCommentByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeCommentByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLikeCommentByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_GetLikeCommentByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLikeCommentByUser(ctx, req.(*GetLikeCommentByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeService_ServiceDesc is the grpc.ServiceDesc for LikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LikeService",
	HandlerType: (*LikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLikeTweet",
			Handler:    _LikeService_CreateLikeTweet_Handler,
		},
		{
			MethodName: "DeleteLikeTweet",
			Handler:    _LikeService_DeleteLikeTweet_Handler,
		},
		{
			MethodName: "GetLikesTweet",
			Handler:    _LikeService_GetLikesTweet_Handler,
		},
		{
			MethodName: "GetLikeTweetByUser",
			Handler:    _LikeService_GetLikeTweetByUser_Handler,
		},
		{
			MethodName: "GetLikedTweet",
			Handler:    _LikeService_GetLikedTweet_Handler,
		},
		{
			MethodName: "CreateLikeComment",
			Handler:    _LikeService_CreateLikeComment_Handler,
		},
		{
			MethodName: "DeleteLikeComment",
			Handler:    _LikeService_DeleteLikeComment_Handler,
		},
		{
			MethodName: "GetLikesComment",
			Handler:    _LikeService_GetLikesComment_Handler,
		},
		{
			MethodName: "GetLikeCommentByUser",
			Handler:    _LikeService_GetLikeCommentByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/like-proto/like.proto",
}
